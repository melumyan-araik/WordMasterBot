import random
from aiogram import Dispatcher, types, F
from database.models import get_user, get_words_by_level, update_test_results

async def cmd_test(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    
    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ù–∞–ø–∏—à–∏ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    words = get_words_by_level(user['level'], 20)
    
    if not words:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —É—Ä–æ–≤–Ω—è {user['level']} –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_word = random.choice(words)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    correct_answer = test_word['translation']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    wrong_answers = [word['translation'] for word in words 
                    if word['translation'] != correct_answer]
    
    # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    wrong_answers = random.sample(wrong_answers, min(3, len(wrong_answers)))
    
    all_answers = [correct_answer] + wrong_answers
    random.shuffle(all_answers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=f"{chr(65+i)}) {answer}", callback_data=f"test_{test_word['word']}_{answer}")]
        for i, answer in enumerate(all_answers)
    ])
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    word = test_word['word'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    transcription = test_word['transcription'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    example = test_word['example'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    
    test_text = (
        f"üß™ –¢–µ—Å—Ç: {word}\n\n"
        f"–°–ª–æ–≤–æ: {word} [{transcription}]\n"
        f"–ü—Ä–∏–º–µ—Ä: {example}\n\n"
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —ç—Ç–æ —Å–ª–æ–≤–æ?"
    )
    
    await message.answer(test_text, reply_markup=keyboard)

async def process_test_answer(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç"""
    data = callback.data.split('_')
    word = data[1]
    selected_answer = data[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database.models import get_words_by_level
    user = get_user(callback.from_user.id)
    words = get_words_by_level(user['level'], 100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å
    test_word = None
    for w in words:
        if w['word'] == word:
            test_word = w
            break
    
    if not test_word:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    correct_answer = test_word['translation']
    is_correct = selected_answer == correct_answer
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    update_test_results(callback.from_user.id, is_correct)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    word = test_word['word'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    transcription = test_word['transcription'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    translation = correct_answer.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    example = test_word['example'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        result_text = "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    else:
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {translation}"
    
    result_text += f"\n\n–°–ª–æ–≤–æ: {word} [{transcription}]\n"
    result_text += f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n"
    result_text += f"–ü—Ä–∏–º–µ—Ä: {example}"
    
    await callback.message.edit_text(result_text)

def register_test_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã test"""
    dp.message.register(cmd_test, F.text == "/test")
    dp.callback_query.register(process_test_answer, F.data.startswith("test_")) 