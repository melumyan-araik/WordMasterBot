from aiogram import Dispatcher, types, F
from database.models import get_user, get_spaced_repetition_stats, get_due_words_count

async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    
    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ù–∞–ø–∏—à–∏ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    words_learned = user['words_learned']
    test_results = user['test_results']
    spaced_stats = get_spaced_repetition_stats(user_id)
    due_words = get_due_words_count(user_id)
    
    total_words = len(words_learned)
    correct_answers = test_results['correct']
    incorrect_answers = test_results['incorrect']
    total_tests = correct_answers + incorrect_answers
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if total_tests > 0:
        accuracy_percent = (correct_answers / total_tests) * 100
    else:
        accuracy_percent = 0
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
        f"üéØ –£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
        f"üìö –í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {total_words}\n"
        f"üß™ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect_answers}\n"
        f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy_percent:.1f}%\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    stats_text += (
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
        f"üìù –°–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {spaced_stats['total_words']}\n"
        f"‚è∞ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {due_words}\n"
        f"üîÑ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {spaced_stats['total_reviews']}\n"
        f"üìä –°—Ä–µ–¥–Ω–∏–π ease factor: {spaced_stats['avg_ease_factor']}\n\n"
    )
    
    if total_words > 0:
        stats_text += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–ª–æ–≤
        recent_words = words_learned[-5:] if len(words_learned) > 5 else words_learned
        for word in recent_words:
            stats_text += f"‚Ä¢ {word}\n"
    
    if due_words > 0:
        stats_text += f"\nüí° –£ —Ç–µ–±—è {due_words} —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π /review"
    elif total_tests == 0:
        stats_text += "\nüí° –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /test!"
    
    await message.answer(stats_text)

def register_stats_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã stats"""
    dp.message.register(cmd_stats, F.text == "/stats") 