from aiogram import Dispatcher, types, F
from database.models import get_user, get_words_for_review, update_spaced_repetition, get_spaced_repetition_stats

async def cmd_review(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review - –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    
    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ù–∞–ø–∏—à–∏ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    review_words = get_words_for_review(user_id, 5)
    
    if not review_words:
        await message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –£ —Ç–µ–±—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ /words - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ /stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ /test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_spaced_repetition_stats(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    review_text = "üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n\n"
    review_text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    review_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {stats['total_words']}\n"
    review_text += f"‚Ä¢ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {stats['due_today']}\n"
    review_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {stats['total_reviews']}\n\n"
    
    review_text += f"üìù –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ({len(review_words)}):\n\n"
    
    for i, word_data in enumerate(review_words, 1):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        word = word_data['word'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
        transcription = word_data['transcription'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
        translation = word_data['translation'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
        example = word_data['example'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
        
        review_text += (
            f"{i}. {word} [{transcription}]\n"
            f"   –ü–µ—Ä–µ–≤–æ–¥: {translation}\n"
            f"   –ü—Ä–∏–º–µ—Ä: {example}\n"
            f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {word_data['interval_days']} –¥–Ω.\n\n"
        )
    
    review_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π /review_test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∏—Ö —Å–ª–æ–≤!"
    
    await message.answer(review_text)

async def cmd_review_test(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review_test - —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    
    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ù–∞–ø–∏—à–∏ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    review_words = get_words_for_review(user_id, 10)
    
    if not review_words:
        await message.answer(
            "üéâ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ /words - –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ /review - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_word = review_words[0]
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    correct_answer = test_word['translation']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    from database.models import get_words_by_level
    other_words = get_words_by_level(user['level'], 20)
    wrong_answers = [word['translation'] for word in other_words 
                    if word['translation'] != correct_answer]
    
    # –í—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    import random
    wrong_answers = random.sample(wrong_answers, min(3, len(wrong_answers)))
    
    all_answers = [correct_answer] + wrong_answers
    random.shuffle(all_answers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=f"{chr(65+i)}) {answer}", callback_data=f"review_{test_word['id']}_{test_word['word']}_{answer}")]
        for i, answer in enumerate(all_answers)
    ])
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    word = test_word['word'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    transcription = test_word['transcription'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    example = test_word['example'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    
    test_text = (
        f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {word}\n\n"
        f"–°–ª–æ–≤–æ: {word} [{transcription}]\n"
        f"–ü—Ä–∏–º–µ—Ä: {example}\n\n"
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —ç—Ç–æ —Å–ª–æ–≤–æ?"
    )
    
    await message.answer(test_text, reply_markup=keyboard)

async def process_review_answer(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    data = callback.data.split('_')
    review_id = int(data[1])
    word = data[2]
    selected_answer = data[3]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database.models import get_words_for_review
    review_words = get_words_for_review(callback.from_user.id, 10)
    correct_word = None
    
    for w in review_words:
        if w['id'] == review_id and w['word'] == word:
            correct_word = w
            break
    
    if not correct_word:
        await callback.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    correct_answer = correct_word['translation']
    is_correct = selected_answer == correct_answer
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
    from database.models import update_spaced_repetition
    update_spaced_repetition(review_id, is_correct)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    word = correct_word['word'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    transcription = correct_word['transcription'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    translation = correct_answer.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    example = correct_word['example'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        result_text = "‚úÖ –í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    else:
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {translation}"
    
    result_text += f"\n\n–°–ª–æ–≤–æ: {word} [{transcription}]\n"
    result_text += f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n"
    result_text += f"–ü—Ä–∏–º–µ—Ä: {example}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
    if is_correct:
        if correct_word['consecutive_correct'] == 0:
            next_interval = 1
        elif correct_word['consecutive_correct'] == 1:
            next_interval = 3
        elif correct_word['consecutive_correct'] == 2:
            next_interval = 7
        else:
            next_interval = 7 + (correct_word['consecutive_correct'] - 1) * 7
        
        result_text += f"üîÑ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {next_interval} –¥–Ω–µ–π"
    else:
        result_text += f"üîÑ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞"
    
    await callback.message.edit_text(result_text)

def register_review_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã review"""
    dp.message.register(cmd_review, F.text == "/review")
    dp.message.register(cmd_review_test, F.text == "/review_test")
    dp.callback_query.register(process_review_answer, F.data.startswith("review_")) 