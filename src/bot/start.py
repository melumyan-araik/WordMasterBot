from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import add_user, get_user

class UserLevel(StatesGroup):
    waiting_for_level = State()

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user['level']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/words - –ø–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤\n"
            "/review - –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
            "/test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - –ø–æ–º–æ—â—å"
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="A1 (–ù–∞—á–∏–Ω–∞—é—â–∏–π)", callback_data="level_A1"),
                types.InlineKeyboardButton(text="A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π)", callback_data="level_A2")
            ],
            [
                types.InlineKeyboardButton(text="B1 (–°—Ä–µ–¥–Ω–∏–π)", callback_data="level_B1"),
                types.InlineKeyboardButton(text="B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)", callback_data="level_B2")
            ]
        ])
        
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:",
            reply_markup=keyboard
        )
        await state.set_state(UserLevel.waiting_for_level)

async def process_level_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    level = callback.data.split('_')[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    add_user(user_id, level)
    
    await state.clear()
    
    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level}\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å 5 —Å–ª–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üìö /words - –ø–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤\n"
        "üîÑ /review - –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
        "üß™ /test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚ùì /help - –ø–æ–º–æ—â—å\n\n"
        "–ù–∞–ø–∏—à–∏ /words, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ!"
    )

def register_start_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã start"""
    dp.message.register(cmd_start, F.text == "/start")
    dp.callback_query.register(process_level_selection, F.data.startswith("level_")) 