from aiogram import Dispatcher, types, F
from database.models import get_user, get_words_by_level, add_learned_word, add_word_to_spaced_repetition
from .config import WORDS_PER_DAY

async def cmd_words(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /words"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user(user_id)
    
    if not user:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ù–∞–ø–∏—à–∏ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    words = get_words_by_level(user['level'], WORDS_PER_DAY)
    
    if not words:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —É—Ä–æ–≤–Ω—è {user['level']} –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏
    words_text = f"üìö –í–æ—Ç —Ç–≤–æ–∏ {len(words)} —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
    
    for i, word_data in enumerate(words, 1):
        words_text += (
            f"{i}. **{word_data['word']}** [{word_data['transcription']}]\n"
            f"   –ü–µ—Ä–µ–≤–æ–¥: {word_data['translation']}\n"
            f"   –ü—Ä–∏–º–µ—Ä: {word_data['example']}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö
        add_learned_word(user_id, word_data['word'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        add_word_to_spaced_repetition(user_id, word_data['word_id'], word_data['word'])
    
    words_text += (
        "üí° –≠—Ç–∏ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /review –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π!"
    )
    
    await message.answer(words_text)

def register_words_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã words"""
    dp.message.register(cmd_words, F.text == "/words") 