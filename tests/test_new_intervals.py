#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
"""

from database.models import (
    init_db, add_user, get_words_by_level, add_word_to_spaced_repetition,
    get_words_for_review, update_spaced_repetition
)
from datetime import datetime, timedelta

def test_new_interval_algorithm():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 77777
    add_user(test_user_id, 'A1')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ
    words = get_words_by_level('A1', 1)
    if not words:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    word = words[0]
    add_word_to_spaced_repetition(test_user_id, word['word_id'], word['word'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    review_words = get_words_for_review(test_user_id, 1)
    if not review_words:
        print("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        return False
    
    review_word = review_words[0]
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–æ: {review_word['word']}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print("\nüìà –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    
    for i in range(5):
        update_spaced_repetition(review_word['id'], True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        updated_words = get_words_for_review(test_user_id, 1)
        if updated_words:
            updated_word = updated_words[0]
            consecutive_correct = updated_word['consecutive_correct']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if consecutive_correct == 1:
                expected_interval = 1
            elif consecutive_correct == 2:
                expected_interval = 3
            elif consecutive_correct == 3:
                expected_interval = 7
            else:
                expected_interval = 7 + (consecutive_correct - 3) * 7
            
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: ‚úÖ -> –∏–Ω—Ç–µ—Ä–≤–∞–ª: {updated_word['interval_days']} –¥–Ω. (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_interval})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            if updated_word['interval_days'] == expected_interval:
                print(f"   ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ!")
                return False
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    print("\nüìâ –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
    update_spaced_repetition(review_word['id'], False)
    
    updated_words = get_words_for_review(test_user_id, 1)
    if updated_words:
        updated_word = updated_words[0]
        print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç -> –∏–Ω—Ç–µ—Ä–≤–∞–ª: {updated_word['interval_days']} –¥–Ω.")
        
        if updated_word['interval_days'] == 1:
            print("   ‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Å–±—Ä–æ—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞!")
            return False
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    return True

def test_interval_sequence():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 66666
    add_user(test_user_id, 'A1')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ
    words = get_words_by_level('A1', 1)
    if not words:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    word = words[0]
    add_word_to_spaced_repetition(test_user_id, word['word_id'], word['word'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    review_words = get_words_for_review(test_user_id, 1)
    if not review_words:
        print("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        return False
    
    review_word = review_words[0]
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–æ: {review_word['word']}")
    
    # –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    expected_intervals = [1, 3, 7, 14, 21, 28, 35]
    
    print("\nüìã –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:")
    for i, interval in enumerate(expected_intervals):
        print(f"   {i+1}-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {interval} –¥–Ω–µ–π")
    
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    
    for i in range(len(expected_intervals)):
        update_spaced_repetition(review_word['id'], True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        updated_words = get_words_for_review(test_user_id, 1)
        if updated_words:
            updated_word = updated_words[0]
            actual_interval = updated_word['interval_days']
            expected_interval = expected_intervals[i]
            
            print(f"   {i+1}-–π –æ—Ç–≤–µ—Ç: {actual_interval} –¥–Ω. (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_interval})")
            
            if actual_interval == expected_interval:
                print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞!")
                return False
    
    print("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
    print("=" * 60)
    
    tests = [
        ("–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", test_new_interval_algorithm),
        ("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", test_interval_sequence),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\nüìã –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:")
        print("‚Ä¢ 1-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 1 –¥–µ–Ω—å")
        print("‚Ä¢ 2-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3 –¥–Ω—è")
        print("‚Ä¢ 3-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 7 –¥–Ω–µ–π (–Ω–µ–¥–µ–ª—è)")
        print("‚Ä¢ 4-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 14 –¥–Ω–µ–π (2 –Ω–µ–¥–µ–ª–∏)")
        print("‚Ä¢ 5-–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 21 –¥–µ–Ω—å (3 –Ω–µ–¥–µ–ª–∏)")
        print("‚Ä¢ –ò —Ç–∞–∫ –¥–∞–ª–µ–µ...")
        print("‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: —Å–±—Ä–æ—Å –Ω–∞ 1 –¥–µ–Ω—å")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    main() 